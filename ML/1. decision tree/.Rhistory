print(xyz)
print(x), print(y), print(z)
xyz
print(x)print(y)print(z)
print(x) print(y) print(z)
print(x)
source("~/.active-rstudio-document")
cat(x,y,z)
w=seq(1,20,5)
2.2:8.2
a = seq(1,3,40)
a
a = seq(1,3,40)
a
a = seq(1,40,3)
a
c = rep(5,10)
c
x = c(1,5,2)
y = c(3,7,9)
max(y)
min(x)
x = x+c(4,3,2)
x = c(1,5,2)
c(x,y)
x=c(1,5,2,3,7,6,8)
y=x^2
z=1/x
w = log(x)
age = c(22,27,31,41,30,25,19,20,23,35)
age[4]
age30 = age>30
age30 = age>>30
age30 = age[age>30]
age[c(8,9,10)]
length(age)
age[c(5,7)]
age2 = age[age>20 & age<25]
t = list(1:4, 5:9)
View(t)
t
t[[1]]
t
ls = list(Rollno=1:4, First name=c("Ravi","Om","Ajay","Shiv"), last name=c("Dev","Gandhi","Pande","Rao"), Subject=c("AE","DS","ML","OS"), marks=c(35,40,38,02), Result=c("P","P","P","F"))
ls = list(Rollno=1:4, Firstname=c("Ravi","Om","Ajay","Shiv"), lastname=c("Dev","Gandhi","Pande","Rao"), Subject=c("AE","DS","ML","OS"), marks=c(35,40,38,02), Result=c("P","P","P","F"))
View(ls)
ls
m = matrix(1:6, 2,3)
m
m = matrix(1:6,nrow = 3, ncol = 4, byrow = TRUE)
m
m = matrix(1:6,nrow = 2, ncol = 4, byrow = TRUE)
m = matrix(1:6,nrow = 3, ncol = 4, byrow = FALSE)
m
d = 1:8
dim(d) = c(4,2)
d
##ujhdxf
View(match_stat)
#using only processed data ----
#traning
library(rpart.plot)
library("rpart")
data = read.csv("train_data.csv")
setwd("B:/SY/SEM_1/DS/courceProject/DS_WaterPotability_Detection/ML/3. decision tree")
#libraries ----
library("rpart.plot")
library("rpart")
library("caret")
#reading balanced down sampled data ----
data = read.csv("down.csv")
data = data[, -1]
data$Potability = as.factor(data$Potability)
#split data
set.seed(123)
trainIndex <- createDataPartition(data$Potability, p = 0.9, list = FALSE)
train_data = data[trainIndex, ]
test_data  = data[-trainIndex, ]
#building model----
#model = rpart(Potability ~ .,
#                                cp = 0.0001,
#                               maxdepth = 6,
#                              minbucket = 6,
#                             data = train_data,
#                            method = "class")
model = rpart(Potability ~ .,
data = train_data,
control = list(minsplit=10,
minbucket=5,
cp=0.01,
xval=5,
maxdepth=10)
)
#model = rpart(Potability ~ ph + Hardness + Solids + Chloramines + Sulphate + Conductivity + Organic_carbon + Trihalomethanes + Turbidity,
#                                   cp = 0.00005,
#                                  maxdepth = 11,
#                                 minbucket = 11,
#                                data = train_data,
#                               method = "class")
rpart.plot(data_classification_tree)
#building model----
#model = rpart(Potability ~ .,
#                                cp = 0.0001,
#                               maxdepth = 6,
#                              minbucket = 6,
#                             data = train_data,
#                            method = "class")
model = rpart(Potability ~ .,
data = train_data,
control = list(minsplit=10,
minbucket=5,
cp=0.01,
xval=5,
maxdepth=10)
)
#model = rpart(Potability ~ ph + Hardness + Solids + Chloramines + Sulphate + Conductivity + Organic_carbon + Trihalomethanes + Turbidity,
#                                   cp = 0.00005,
#                                  maxdepth = 11,
#                                 minbucket = 11,
#                                data = train_data,
#                               method = "class")
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data, type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(matrix)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data, type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
testing model using train----
#testing model using train----
set.seed(10)
prediction = predict(model, train_data, type = "class")
cm = confusionMatrix(train_data[, 10], prediction)
print(cm)
model = rpart(Potability ~ ., cp = 0.0001, maxdepth = 6, minbucket = 6, data = train_data, method = "class")
#testing model using test----
set.seed(10)
prediction = predict(model, test_data, type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#m2
model = rpart(Potability ~ ., data = train_data, control = list( minsplit = 10, minbucket = 5, cp = 0.01, xval = 5, maxdepth = 10) )
#testing model using test----
set.seed(10)
prediction = predict(model, test_data, type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#m3
model = rpart(Potability ~ ., cp = 0.00005, maxdepth = 11, minbucket = 11, data = train_data, method = "class")
#testing model using test----
set.seed(10)
prediction = predict(model, test_data, type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#m2
model = rpart(Potability ~ ., data = train_data, method = "class", control = list(cp = 0.00005, minsplit = 10, minbucket = 11, , xval = 5, maxdepth = 11) )
#m2
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00005, minsplit = 10, minbucket = 11, , xval = 5, maxdepth = 11) )
#m2
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00005, minsplit = 10, minbucket = 11, xval = 5, maxdepth = 11))
#testing model using test----
set.seed(10)
prediction = predict(model, test_data, type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00005, minsplit = 10, minbucket = 11, xval = 5, maxdepth = 11))
rpart.plot(model)
#testing model using train----
set.seed(10)
prediction = predict(model, train_data, type = "class")
cm = confusionMatrix(train_data[, 10], prediction)
print(cm)
?rpart
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00001, minsplit = 10, minbucket = 11, xval = 5, maxdepth = 11))
#testing model using test----
set.seed(10)
prediction = predict(model, test_data, type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#testing model using train----
set.seed(10)
prediction = predict(model, train_data, type = "class")
cm = confusionMatrix(train_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00001, minsplit = 10, minbucket = 11, xval = 6, maxdepth = 11))
#testing model using test----
set.seed(10)
prediction = predict(model, test_data, type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00001, minsplit = 10, minbucket = 11, xval = 6, maxdepth = 20))
rpart.plot(model)
set.seed(10)
prediction = predict(model, test_data, type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
prediction = predict(model, train_data[, -10], type = "class")
cm = confusionMatrix(train_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00001, minsplit = 10, minbucket = 11, xval = 6, maxdepth = 10))
rpart.plot(model)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00001, minsplit = 10, minbucket = 1, xval = 6, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#testing model using train----
set.seed(10)
prediction = predict(model, train_data[, -10], type = "class")
cm = confusionMatrix(train_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00001, minsplit = 1, minbucket = 1, xval = 6, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#testing model using train----
set.seed(10)
prediction = predict(model, train_data[, -10], type = "class")
cm = confusionMatrix(train_data[, 10], prediction)
print(cm)
0
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00001, minsplit = 10, minbucket = 1, xval = 6, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.00001, minsplit = 10, minbucket = 10, xval = 6, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 6, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#testing model using train----
set.seed(10)
prediction = predict(model, train_data[, -10], type = "class")
cm = confusionMatrix(train_data[, 10], prediction)
print(cm)
#reading balanced up sampled data ----
data = read.csv("up.csv")
data = data[, -1]
data$Potability = as.factor(data$Potability)
#split data
set.seed(123)
trainIndex <- createDataPartition(data$Potability, p = 0.9, list = FALSE)
train_data = data[trainIndex, ]
test_data  = data[-trainIndex, ]
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 6, maxdepth = 15))
rpart.plot(model)
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
set.seed(10)
prediction = predict(model, train_data[, -10], type = "class")
cm = confusionMatrix(train_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 15, xval = 6, maxdepth = 15))
rpart.plot(model)
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 6, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.0000001, minsplit = 10, minbucket = 10, xval = 6, maxdepth = 15))
rpart.plot(model)
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 11, minbucket = 10, xval = 6, maxdepth = 15))
rpart.plot(model)
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 11, minbucket = 11, xval = 6, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 11, xval = 6, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 6, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 7, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 7, maxdepth = 11))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 7, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 7, maxdepth = 16))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 11, xval = 7, maxdepth = 16))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 11, xval = 7, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 7, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
#using only processed data ----
#traning
data = read.csv("train_data.csv")
setwd("B:/SY/SEM_1/DS/courceProject/DS_WaterPotability_Detection/ML/3. decision tree")
#libraries ----
library("rpart.plot")
library("rpart")
library("caret")
#using only processed data ----
#traning
data = read.csv("train_data.csv")
#using only processed data ----
data = read.csv("normalized.csv")
data = data[, -1]
data$Potability = as.factor(data$Potability)
#split data
set.seed(123)
trainIndex <- createDataPartition(data$Potability, p = 0.9, list = FALSE)
train_data = data[trainIndex, ]
test_data  = data[-trainIndex, ]
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 7, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
52/(52+75)
#reading balanced up sampled data ----
data = read.csv("up.csv")
data = data[, -1]
data$Potability = as.factor(data$Potability)
#split data
set.seed(123)
trainIndex <- createDataPartition(data$Potability, p = 0.9, list = FALSE)
train_data = data[trainIndex, ]
test_data  = data[-trainIndex, ]
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 7, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
143/(143+56)
#reading balanced down sampled data ----
data = read.csv("down.csv")
data = data[, -1]
data$Potability = as.factor(data$Potability)
#split data
set.seed(123)
trainIndex <- createDataPartition(data$Potability, p = 0.9, list = FALSE)
train_data = data[trainIndex, ]
test_data  = data[-trainIndex, ]
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 7, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
76/(76+51)
#reading balanced 50:50 sampled data----
data = read.csv("half.csv")
data = data[, -1]
data$Potability = as.factor(data$Potability)
#split data
set.seed(123)
trainIndex <- createDataPartition(data$Potability, p = 0.9, list = FALSE)
#reading balanced 50:50 sampled data----
data = read.csv("half.csv")
data = data[, -1]
data$Potability = as.factor(data$Potability)
#split data
set.seed(123)
trainIndex <- createDataPartition(data$Potability, p = 0.9, list = FALSE)
#libraries ----
library("rpart.plot")
library("rpart")
library("caret")
#reading balanced 50:50 sampled data----
data = read.csv("half.csv")
data = data[, -1]
data$Potability = as.factor(data$Potability)
#split data
set.seed(123)
trainIndex <- createDataPartition(data$Potability, p = 0.9, list = FALSE)
train_data = data[trainIndex, ]
test_data  = data[-trainIndex, ]
#building model----
model = rpart(Potability ~ ., data = train_data, control = list(cp = 0.000001, minsplit = 10, minbucket = 10, xval = 7, maxdepth = 15))
rpart.plot(model)
#testing model using test----
set.seed(10)
prediction = predict(model, test_data[, -10], type = "class")
cm = confusionMatrix(test_data[, 10], prediction)
print(cm)
97/(97+66)
install.packages("e1071")  # For SVM
install.packages("caret")  # For model evaluation
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Display confusion matrix
print(conf_matrix)
source("B:/SY/SEM_1/DS/courceProject/DS_WaterPotability_Detection/ML/4.SVM/SVM.R")
View(data)
data <- data[-1, ]
# Load datasets (adjust the file path)
data <- read.csv("half.csv")
data <- data[, -1]
View(data)
